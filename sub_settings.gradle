import groovy.io.FileType
import groovy.io.FileVisitResult

static def buildFullProjectName(File rootDir, File dir) {
    if(dir == null || !dir.exists() || !dir.isDirectory()) {
        return ""
    }
    if(!new File("${dir}/build.gradle").exists() && !new File("${dir}/settings.gradle").exists() && !new File("${dir}/package.json").exists()) {
        return ""
    }
    if(rootDir.absolutePath == dir.absolutePath) {
        return ""
    }
    def fullProjectName = dir.name
    if(dir.parentFile != null && dir.parentFile.exists()) {
        fullProjectName = buildFullProjectName(rootDir, dir.parentFile) + ":${fullProjectName}"
    }
//    println "fullProjectName = ${fullProjectName}"
    return fullProjectName
}

rootDir.traverse(
        type: FileType.DIRECTORIES,
        preDir: {
            if (!new File("${it}/build.gradle").exists() && !new File("${it}/settings.gradle").exists() && !new File("${it}/package.json").exists()) {
                return FileVisitResult.SKIP_SUBTREE
            }
        }) { dir ->
    if (dir) {
        def fullProjectName = buildFullProjectName(rootDir, dir)
        if(!fullProjectName.isEmpty()) {
            println "include '${fullProjectName}'"
            include fullProjectName //register the project path using : notation
            println "project('${fullProjectName}').projectDir = ${dir}"
            def project = project(fullProjectName)
            println "project('${fullProjectName}').name = ${project.name}"
            if(project.hasProperty("artifactId")) {
                def projectName = project.property("artifactId")
                project.name = projectName
            }
            project.projectDir = dir
        }
    }
}

buildCache {
    local {
        directory = new File(rootDir, 'build-cache')
        removeUnusedEntriesAfterDays = 30
    }
}
